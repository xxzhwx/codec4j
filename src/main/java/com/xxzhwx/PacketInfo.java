package com.xxzhwx;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

public class PacketInfo {
    public final Class<?> clazz;
    public final Map<Integer, Field> fieldMap;

    public String codecPackageName;
    public String codecName;

    public PacketInfo(Class<?> clazz, Map<Integer, Field> fieldMap) {
        this.clazz = clazz;
        this.fieldMap = fieldMap;
    }

    public String getCodecName() {
        if (codecName == null) {
            codecName = clazz.getSimpleName() + "Codec";
        }
        return codecName;
    }

    public String getCodecFullName() {
        return new StringJoiner(".").add(codecPackageName).add(getCodecName()).toString();
    }

    public void genCodec(String dirPath, String packageName) throws IOException {
        this.codecPackageName = packageName;

        String objectType = clazz.getName();
        String objectVar = "object";
        String bufferType = "org.apache.mina.core.buffer.IoBuffer";
        String bufferVar = "buffer";
        String superType = "com.xxzhwx.Codec<" + objectType + ">";

        System.out.println("gen " + getCodecName());

        List<String> lines = new ArrayList<>();
        lines.add("package " + packageName + ";");
        Utils.addAutoGeneratedNote(lines);
        lines.add("public class " + getCodecName() + " implements " + superType + " {");

        lines.add("public void encode(" + objectType + " " + objectVar + ", " + bufferType + " " + bufferVar + ") {");
        for (Map.Entry<Integer, Field> entry : fieldMap.entrySet()) {
            Field f = entry.getValue();
            String type = f.getType().getSimpleName();
            String fullType = f.getType().getName();
            String name = f.getName();
            if (type.equalsIgnoreCase("byte") || type.equalsIgnoreCase("Byte")) {
                lines.add(bufferVar + ".put(" + objectVar + "." + name + ");");
            } else if (type.equalsIgnoreCase("short") || type.equalsIgnoreCase("Short")) {
                lines.add(bufferVar + ".putShort(" + objectVar + "." + name + ");");
            } else if (type.equalsIgnoreCase("int") || type.equalsIgnoreCase("Integer")) {
                lines.add(bufferVar + ".putInt(" + objectVar + "." + name + ");");
            } else if (type.equalsIgnoreCase("long") || type.equalsIgnoreCase("Long")) {
                lines.add(bufferVar + ".putLong(" + objectVar + "." + name + ");");
            } else if (type.equalsIgnoreCase("float") || type.equalsIgnoreCase("Float")) {
                lines.add(bufferVar + ".putFloat(" + objectVar + "." + name + ");");
            } else if (type.equalsIgnoreCase("double") || type.equalsIgnoreCase("Double")) {
                lines.add(bufferVar + ".putDouble(" + objectVar + "." + name + ");");
            } else if (type.equalsIgnoreCase("String")) {
                lines.add("this.writeString(" + objectVar + "." + name + ", " + bufferVar + ");");
            } else {
                lines.add("this.writeObject(" + objectVar + "." + name + ", " + bufferVar + ");");
            }
        }
        lines.add("}");

        lines.add("public " + objectType + " decode(" + bufferType + " " + bufferVar + ") {");
        lines.add(objectType + " " + objectVar + " = new " + objectType + "();");
        for (Map.Entry<Integer, Field> entry : fieldMap.entrySet()) {
            Field f = entry.getValue();
            String type = f.getType().getSimpleName();
            String fullType = f.getType().getName();
            String name = f.getName();
            if (type.equalsIgnoreCase("byte") || type.equalsIgnoreCase("Byte")) {
                lines.add(objectVar + "." + name + " = " + bufferVar + ".get();");
            } else if (type.equalsIgnoreCase("short") || type.equalsIgnoreCase("Short")) {
                lines.add(objectVar + "." + name + " = " + bufferVar + ".getShort();");
            } else if (type.equalsIgnoreCase("int") || type.equalsIgnoreCase("Integer")) {
                lines.add(objectVar + "." + name + " = " + bufferVar + ".getInt();");
            } else if (type.equalsIgnoreCase("long") || type.equalsIgnoreCase("Long")) {
                lines.add(objectVar + "." + name + " = " + bufferVar + ".getLong();");
            } else if (type.equalsIgnoreCase("float") || type.equalsIgnoreCase("Float")) {
                lines.add(objectVar + "." + name + " = " + bufferVar + ".getFloat();");
            } else if (type.equalsIgnoreCase("double") || type.equalsIgnoreCase("Double")) {
                lines.add(objectVar + "." + name + " = " + bufferVar + ".getDouble();");
            } else if (type.equalsIgnoreCase("String")) {
                lines.add(objectVar + "." + name + " = " + "this.readString(" + bufferVar + ");");
            } else {
                lines.add(objectVar + "." + name + " = " + "this.readObject(" + fullType + ".class, " + bufferVar + ");");
            }
        }
        lines.add("return " + objectVar + ";");
        lines.add("}");

        lines.add("}"); //! class

        Utils.saveToFile(lines,
                new StringJoiner(File.separator)
                        .add(dirPath)
                        .add(getCodecName() + ".java")
                        .toString());
    }
}
